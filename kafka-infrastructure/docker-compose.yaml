version: '3.8'

services:
  # Kafka (KRaft mode - no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      #KAFKA_JMX_PORT: 9101
      #KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafka for easy topic management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9091:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      #KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      # Tell UI where JMX really is (inside the Docker network)
      #KAFKA_CLUSTERS_0_JMXHOST: kafka
      #KAFKA_CLUSTERS_0_JMXPORT: 9997
    depends_on:
      kafka:
        condition: service_healthy

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false         # local only
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - "path.data=/usr/share/elasticsearch/data"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD", "bash", "-lc", "curl -s http://localhost:9200 >/dev/null || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 20

    networks:
      - monitor-net

    volumes:
      - es_data:/usr/share/elasticsearch/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - elasticsearch
    networks:
      - monitor-net
    volumes:
      - grafana_data:/var/lib/grafana

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"

    networks:
      - monitor-net

  # Create Kafka topics on startup
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
      echo "Waiting for Kafka to be ready..."
      sleep 15
      echo "Creating Kafka topics..."
      kafka-topics --create --if-not-exists --topic user-activity --partitions 3 --replication-factor 1 --bootstrap-server kafka:29092
      kafka-topics --create --if-not-exists --topic user-activity-processed --partitions 3 --replication-factor 1 --bootstrap-server kafka:29092
      echo "Topics created successfully!"
      kafka-topics --list --bootstrap-server kafka:29092
      '
    restart: "no"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - kafka
    networks:
      - monitor-net

volumes:
  es_data:
  grafana_data:
  kafka_data:

networks:
  monitor-net:
    driver: bridge
  default:
    name: kafka-opensearch-network